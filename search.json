[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A deck of cards demo of nbdev based on ideas from"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\nInstall using :\npip install your_project_name\nor:\nconda -install -c fastai nbdev_cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nthis lib provides a Card class you can use to create, display , and compare playing cards:\n\nCard(1,3)\n\n3♦\n\n\n\nsuits[1]\n\n'♦'\n\n\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\n\ndeck = Deck()\n\nThat should be 52 cards\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits we define for a Card:\n\nsuits\n\n'♣♦♥♠'\n\n\n\nCard(1,1) in deck\n\nFalse\n\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_test2.card.Card)\n\nRemoves card from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nremove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nthe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ndeck.pop()\n\nK♠\n\n\n\ntest_eq(len(deck), 51)"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and ranks. These are the ranks:\nFor instance, the suit at index 0:\nFor instance, the rank at index 1 (note that there isn’t a plying card at position 0, since we want the ranks to match the indices wher possible):\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card – A basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indices:\nFor instance, here’s some tests for equality\n\nCard(suit=1, rank=3)\n\n3♦\n\n\n\nCard(suit=2, rank=3)\n\n3♥\n\n\n\nCard(suit=1, rank=3)\n\n3♦\n\n\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\n\n\ntest_ne(Card(suit=2, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=1, rank=2), Card(suit=1, rank=3))\n\n…and a test of <\n\nassert Card(suit=1, rank=3)<Card(suit=2, rank=3)\n\n… and finally of >\n\nassert Card(suit=3, rank=3)>Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3)>Card(suit=2, rank=3)\n\n\nassert Card(suit=1, rank=4)<Card(suit=2, rank=3)"
  }
]